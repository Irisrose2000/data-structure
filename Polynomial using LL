#include<stdio.h>
#include<stdlib.h>

struct node {
    float coefficient;
    int exponent;
    struct node *link;
};

// Function declarations
struct node* current(struct node* head);
struct node* insert(struct node* head, float coefficient, int exponent);
void print(struct node* head);

int main() {
    struct node* head = NULL;
    printf("Enter the polynomial:\n");
    head = current(head);  // Get polynomial terms
    print(head);  // Print the polynomial
    return 0;
}

struct node* current(struct node* head) {
    int n, i;
    float coefficient;
    int exponent;
    printf("Enter the number of terms:\n");
    scanf("%d", &n);
    
    // Loop to input coefficient and exponent and insert into the list
    for (i = 0; i < n; i++) {
        printf("Enter the coefficient of term %d:\n", i + 1);
        scanf("%f", &coefficient);
        printf("Enter the exponent of term %d:\n", i + 1);
        scanf("%d", &exponent);
        head = insert(head, coefficient, exponent);
    }
    
    return head;  // Return the updated head pointer
}

struct node* insert(struct node* head, float coefficient, int exponent) {
    struct node *temp, *ptr;
    
    // Create a new node
    ptr = (struct node*) malloc(sizeof(struct node));
    ptr->coefficient = coefficient;
    ptr->exponent = exponent;
    ptr->link = NULL;  // Initialize the link to NULL
    
    // If the list is empty or the new node has a greater exponent
    if (head == NULL || exponent > head->exponent) {
        ptr->link = head;
        head = ptr;
    } else {
        temp = head;
        // Traverse the list to find the correct position for the new node
        while (temp->link != NULL && temp->link->exponent > exponent) {
            temp = temp->link;
        }
        ptr->link = temp->link;
        temp->link = ptr;
    }
    
    return head;  // Return the updated head pointer
}

void print(struct node* head) {
    if (head == NULL) {
        printf("No polynomial\n");
    } else {
        struct node* temp = head;
        while (temp != NULL) {
            // Print the polynomial term
            printf("(%.1fx^%d)", temp->coefficient, temp->exponent);
            temp = temp->link;
            if (temp != NULL) {
                printf(" + ");
            } else {
                printf("\n");
            }
        }
    }
}
